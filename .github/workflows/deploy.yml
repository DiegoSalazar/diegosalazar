name: Deploy Website

on:
  push:
    branches:
      - master
      - main

jobs:
  # build-and-deploy:
  #   runs-on: ubuntu-latest
  #   environment: aws-deploy
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #         cache: 'npm'
  #         cache-dependency-path: 'package-lock.json'

  #     - name: Install dependencies
  #       run: npm install

  #     - name: Build website
  #       run: npm run build

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.5.0

  #     - name: Terraform Init
  #       run: terraform -chdir=./terraform init

  #     - name: Terraform Apply
  #       run: terraform -chdir=./terraform apply -auto-approve -var="domain_name=${{ vars.DOMAIN_NAME }}"

  #     - name: Sync files to S3
  #       run: aws s3 sync ./dist s3://${{ vars.DOMAIN_NAME }} --delete

  import-terraform-state:
    runs-on: ubuntu-latest
    environment: aws-deploy
    # needs: ["build-and-deploy"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform -chdir=./terraform init

      - name: Import Resources (Manual Step)
        run: |
          echo "This step requires manual import commands for each resource."
          echo "You will need to find the actual IDs of your existing AWS resources."
          echo "After importing all resources, run 'terraform -chdir=./terraform plan' and 'terraform -chdir=./terraform apply -auto-approve' to push the state to S3."

            terraform -chdir=./terraform import aws_s3_bucket.site diegosalazar.co

          # terraform -chdir=./terraform import aws_s3_bucket_versioning.site_versioning ${{ vars.DOMAIN_NAME }}
          # terraform -chdir=./terraform import aws_s3_bucket_public_access_block.site ${{ vars.DOMAIN_NAME }}
          # terraform -chdir=./terraform import aws_cloudfront_origin_access_identity.oai YOUR_CLOUDFRONT_OAI_ID
          # terraform -chdir=./terraform import aws_s3_bucket_policy.site ${{ vars.DOMAIN_NAME }}
          # terraform -chdir=./terraform import aws_cloudfront_distribution.s3_distribution YOUR_CLOUDFRONT_DISTRIBUTION_ID

      - name: Terraform Plan and Apply (after import)
        run: |
          terraform -chdir=./terraform plan
          terraform -chdir=./terraform apply -auto-approve
        # This step should only be run after all imports are successful.
        # It will push the imported state to the S3 backend.
